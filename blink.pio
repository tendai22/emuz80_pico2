;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; SET pin 0 should be mapped to your LED GPIO

;
; PIO0:SM0 ... two/one phase clock generator(program clockgen)
;
; SET: BASE: 40(CLK_Pin, inverted), 41(INT_Pin, inverted)
.program clockgen
.wrap_target
    ; outputs are inverted, so 0 means High, 1 means Low
    set pins, 1  ; Turn LED on
    set pins, 0  ; Turn LED off
; revive the following two lines if 2-phase clock feature we use
    ;set pins, 2
    ;set pins, 3
.wrap             ; Blink forever!

;
; PIO1, 3 sm's, total 30 instructions
;

;
; PIO1.SM0: wait_mreq
;
; No IN/OUT/MOV/SET_BASE specified
; JMP_PIN: 28(RFSH_Pin)(New assign)
; GPIO: 42(RESET_Pin)
;       25(MREQ_Pin)
; 9 instructions
.program wait_mreq
    wait 1 gpio 42       ; wait for RESET negate
    wait 1 gpio 25       ; wait for MREQ High
.wrap_target
top:
    wait 0 gpio 25       ; wait MREQ Low
    jmp pin mreq_end     ; RFSH cycle, skip it
    jmp top
mreq_end:
    irq set 0         ; set IRQ0 High and wait it to Low
    wait 1 gpio 25       ; wait for MREQ cycle end
    irq clear 0          ; clear IRQ0
mreq_top:
    jmp top
.wrap

;
; PIO1.SM1: wait iorq ... top half
;
; No IN/OUT/MOV/SET_BASE specified
; 4 instructions
; GPIO 24(IORQ_Pin)(New assign)
;.program wait_iorq
;.wrap_target
;    wait 0 gpio 24      ; wait for IORQ Low
;    irq set 0        ; set IRQ0 High
;    wait 1 gpio 24      ; wait for IORQ cycle end
;    irq clear 0         ; clear IRQ0
;.wrap

;
; sending Z80 status is now omitted(previous PIO1:SM2), 
; I expect getting it by mainCPU's gpio_get 
;

;
; PIO1.SM2 databus control(program databus)
;
; IN/OUT_BASE 16, IN/OUT_COUNT: 8(D0-D7)
; JMP_PIN: 26(RD_Pin)
; SET_BASE: 31(WAIT_Pin), 
;           32(DEBUG_Pin)
;     COUNT: 2
; 19 instructions
.program databus
    mov pindirs, null   ; D0-D7 Hi-Z
    set pins, 1
    wait 0 irq 0
.wrap_target
    wait 1 irq 0
    set pins, 0        ; WAIT Low
    jmp pin write_cycle ; jmp if RD == 1, delay as wait for WR assert
read_cycle:
    push                ; notify an access event occurs
    pull                ; wait for mainCPU event/write data
    out pins, 8         ; put it to D0-D7
    mov pindirs, ~null  ; set PINDIR to all-one (output)
    set pins, 1         ; WAIT High 
    jmp cycle_end
write_cycle:
    in pins, 8
    push                ; data send to mainCPU
    pull                ; sync for mainCPU's process end
    set pins, 1         ; WAIT High 
cycle_end:
    wait 0 irq 0  [2]   ; wait for MREQ/IORQ read cycle end
                        ; setup time about 20ns
    mov pindirs, null   ; set PINDIR to all-zero (input/Hi-Z)
.wrap

% c-sdk {
#include <stdio.h>
#include "hardware/pio.h"
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
//extern int my_pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out);

void clockgen_program_init(PIO pio, uint sm, uint offset, uint pin, uint phase) {

    pio_gpio_init(pio, pin);
    if (phase == 2)
        pio_gpio_init(pio, pin + 1);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, phase, true);
    pio_sm_config c = clockgen_program_get_default_config(offset);
    // set_set_pin_base should have been adjusted by pio->gpiobase
    // so far not so in set_set_pin_base();
    sm_config_set_set_pins(&c, pin, phase);
    // two-phase: (4 instruction loop)
    //  16.0 ... 2.33MHz (420ns/cycle)
    //   9.42 ... 4.0MHz  (250ns/cycle)
    // single clock: (2 instruction loop)
    //  50.0 ... 1.5MHz (660-670ns) 
    //  30.0 ... 2.5MHz (400ns) ... no wait, 
    //  18.7 ... 4.0-4.17MHz (250-260ns) .... 0/1 wait in M1, 1 wait in WR, 0/1 wait in RD
    //  10.0 ... 7.1-7.6MHz (130-140ns) ... seems to work
    //   5.0 ... 14-16MHz (60-70ns) ... does not works
    sm_config_set_clkdiv(&c, 18.7);
    pio_sm_init(pio, sm, offset, &c);
}

void wait_mreq_program_init(PIO pio, uint sm, uint offset, uint rfsh_pin) {
    pio_gpio_init(pio, rfsh_pin);
    //pio_gpio_init(pio, 43);
    //pio_sm_set_consecutive_pindirs(pio, sm, 43, 1, true);
    pio_sm_config c = databus_program_get_default_config(offset);
    sm_config_set_jmp_pin(&c, rfsh_pin);
    //sm_config_set_set_pins(&c, 43, 1);  // BUSRQ(43)
    sm_config_set_clkdiv(&c, 1);         // 1 ... full speed 
    pio_sm_init(pio, sm, offset, &c);

}

void databus_program_init(PIO pio, uint sm, uint offset, uint wait_pin) {
   // sm ... 3
   // IN/OUT_BASE: 16(D0), IN/OUT_COUNT: 8(D0-D7)
   // JMP_BASE: 26(RD), COUNT: 1
   // pin ... SET_BASE: as WAIT_Pin(31)
    pio_gpio_init(pio, wait_pin);
    for (int i = 0; i < 8; ++i)
        pio_gpio_init(pio, 16 + i);
    pio_sm_set_consecutive_pindirs(pio, sm, wait_pin, 1, true);
    pio_sm_config c = databus_program_get_default_config(offset);
    // IN_Pins: D0-D7 16-23
    sm_config_set_in_pins(&c, 16);
    sm_config_set_in_pin_count(&c, 8);
    sm_config_set_in_shift(&c, false, false, 32);
    // OUT_Pins: D0-D7 16-23
    sm_config_set_out_pins(&c, 16, 8);
    sm_config_set_out_shift(&c, true, false, 32);
    // JMP_PIN: 26(RD_Pin)
    pio_gpio_init(pio, 26);     // RD_Pin
    sm_config_set_jmp_pin(&c, 26);  // RD_Pin
    // SET_Pins: 31(Wait_Pin) 1 or 2(in case of DEBUG_Pin as 32)
    sm_config_set_set_pins(&c, wait_pin, 1);
    sm_config_set_clkdiv(&c, 1);         // 1 ... full speed 
    pio_sm_init(pio, sm, offset, &c);
}

%}