;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; SET pin 0 should be mapped to your LED GPIO

.program clockgen
    pull block
    out y, 32
.wrap_target
    mov x, y
    set pins, 0   ; Turn LED on
lp1:
    jmp x-- lp1   ; Delay for (x + 1) cycles, x is a 32 bit number
    mov x, y
    set pins, 1   ; Turn LED off
lp2:
    jmp x-- lp2   ; Delay for the same number of cycles again
.wrap             ; Blink forever!

;.program wait_control
;    set pins, 1     ; WAIT High
;    pull noblock    ; dummy pull for flush
;    wait 1 gpio 42  ; wait for RESET negate
;    wait 1 gpio 25  ; assure MREQ High
;.wrap_target
;    wait 0 gpio 25  ; detect MREQ down edge
;    set pins, 0     ; WAIT Low
;    ; so far always READ
;    mov x, ~NULL    ; set X to all one
;    mov isr, X
;    mov pindirs, x  ; pindir is (all one)out
;    push            ; notify an access occurs
;    pull block      ; wait for cpu's process finished
;    out pins, 8
;    set pins, 1     ; WAIT High
;    wait 1 gpio 25  ; sleep until this cycle ends
;    mov pindirs, NULL   ; D0-D7 reset to 3-state (input)
;.wrap

;
; wait_mreq
; 12 instructions
.program wait_mreq
   set pins, 1          ; WAIT High
   wait 1 gpio 42       ; wait for RESET negate
   wait 1 gpio 25       ; wait for MREQ High
.wrap_target
   wait 0 gpio 25
   set pins, 0          ; WAIT Low
   jmp pin mreq_end     ; RFSH cycle, skip it
   in pins, 1           ; read pin26, RD
   push                 ; put it to RX FIFO
   irq wait 0            ; set IRQ0
; irq wait 0 でソフト側で IRQ0 reset させた方がいいかもしれない。
   irq nowait 2        ; set IRQ2 for databus driver
   set pins, 1          ; WAIT High 
mreq_end:
   wait 1 gpio 25
.wrap 

;
; wait_iorq
;
.program wait_iorq
; 8 instructions
.wrap_target
   wait 0 gpio 24       ; IORQ
   set pins, 0          ; WAIT Low
   in pins, 2           ; read pin27,28, RD,M1
   push                 ; put it to RX FIFO
   irq wait 1            ; set IRQ1
; irq wait 1 でソフト側で IRQ0 reset させた方がいいかもしれない。
   set pins, 1          ; WAIT High
   wait 1 gpio 24
   irq nowait 2        ; set IRQ2 for databus driver
.wrap

;
; databus_read
; 7 instructions
.program databus_read
    pull noblock            ; dummy read
.wrap_target
    pull                    ; wait for write data
    out pins, 8             ; put it to D0-D7
    mov pindirs, ~null      ; set PINDIR to all-one (output)
    irq wait 2              ; wait for MREQ/IORQ read cycle end
    irq clear 2
    mov pindirs, null       ; set PINDIR to all-zero (input/Hi-Z)
.wrap

;
; databus_write
; 6 instructions
.program databus_write
    pull noblock            ; dummy read
.wrap_target
    pull                    ; wait for read event from mainCPU program
    in pins, 8              ; read D0-D7
    push                    ; send to mainCPU program
    irq wait 2              ; wait for MREQ/IORQ write cycle end
    irq clear 2
    ; pindirs already be all-one, so no need to restore it
.wrap

% c-sdk {
#include <stdio.h>
#include "hardware/pio.h"
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
//extern int my_pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out);

void clockgen_program_init(PIO pio, uint sm, uint offset, uint pin) {
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   pio_sm_config c = clockgen_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin, 1);
   pio_sm_init(pio, sm, offset, &c);
}

void wait_mreq_program_init(PIO pio, uint sm, uint offset, uint pin) {
   // pin ... WAIT_Pin
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   pio_sm_config c = wait_mreq_program_get_default_config(offset);
   sm_config_set_jmp_pin(&c, RFSH_Pin);
   sm_config_set_in_pins(&c, RD_Pin);
   sm_config_set_in_pin_count(&c, 1);
   sm_config_set_set_pins(&c, pin, 1);
   sm_config_set_clkdiv(&c, 1);         // 1 ... full speed 
   pio_sm_init(pio, sm, offset, &c);
}

void wait_iorq_program_init(PIO pio, uint sm, uint offset, uint pin) {
   // pin ... WAIT_Pin
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   pio_sm_config c = wait_iorq_program_get_default_config(offset);
   sm_config_set_in_pins(&c, RD_Pin);
   sm_config_set_set_pins(&c, pin, 1);
   sm_config_set_clkdiv(&c, 1);         // 1 ... full speed 
   pio_sm_init(pio, sm, offset, &c);
}

void databus_read_program_init(PIO pio, uint sm, uint offset) {
   // pin ... WAIT_Pin
   pio_sm_config c = databus_read_program_get_default_config(offset);
   sm_config_set_in_pins(&c, 16);
   sm_config_set_in_pin_count(&c, 8);
   sm_config_set_out_pins(&c, 16, 8);
   sm_config_set_clkdiv(&c, 1);         // 1 ... full speed 
   pio_sm_init(pio, sm, offset, &c);
}

void databus_write_program_init(PIO pio, uint sm, uint offset) {
   // pin ... WAIT_Pin
   pio_sm_config c = databus_write_program_get_default_config(offset);
   sm_config_set_in_pins(&c, 16);
   sm_config_set_in_pin_count(&c, 8);
   sm_config_set_out_pins(&c, 16, 8);
   sm_config_set_clkdiv(&c, 1);         // 1 ... full speed 
   pio_sm_init(pio, sm, offset, &c);
}

%}