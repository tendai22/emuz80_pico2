;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; SET pin 0 should be mapped to your LED GPIO

.program blink
    pull block
    out y, 32
.wrap_target
    mov x, y
    set pins, 1   ; Turn LED on
lp1:
    jmp x-- lp1   ; Delay for (x + 1) cycles, x is a 32 bit number
    mov x, y
    set pins, 0   ; Turn LED off
lp2:
    jmp x-- lp2   ; Delay for the same number of cycles again
.wrap             ; Blink forever!


% c-sdk {
#include <stdio.h>
#include "hardware/pio.h"
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
extern int my_pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out);

static inline void my_pio_gpio_init(PIO pio, uint pin) {
    check_pio_param(pio);
    valid_params_if(HARDWARE_PIO, pin < NUM_BANK0_GPIOS);
    printf("pio_gpio_init: %d, %d\n", pin, PIO_FUNCSEL_NUM(pio, pin));
    gpio_set_function(pin, PIO_FUNCSEL_NUM(pio, pin));
}

void blink_program_init(PIO pio, uint sm, uint offset, uint pin) {
   my_pio_gpio_init(pio, pin);
   my_pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   pio_sm_config c = blink_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin - pio_get_gpio_base(pio), 1);
    printf("pinctrl(%p): %08x\n", &(pio->sm[sm].pinctrl), pio->sm[sm].pinctrl);
   pio_sm_init(pio, sm, offset, &c);
}
%}