;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; SET pin 0 should be mapped to your LED GPIO

.program clockgen
    pull block
    out y, 32
.wrap_target
    mov x, y
    set pins, 0   ; Turn LED on
lp1:
    jmp x-- lp1   ; Delay for (x + 1) cycles, x is a 32 bit number
    mov x, y
    set pins, 1   ; Turn LED off
lp2:
    jmp x-- lp2   ; Delay for the same number of cycles again
.wrap             ; Blink forever!

.program wait_control
    set pins, 1     ; WAIT High
    pull noblock    ; dummy pull for flush
    wait 1 gpio 42  ; wait for RESET negate
    wait 1 gpio 25  ; assure MREQ High
.wrap_target
    wait 0 gpio 25  ; detect MREQ down edge
    set pins, 0     ; WAIT Low
    ; so far always READ
    mov x, ~NULL    ; set X to all one
    mov isr, X
    mov pindirs, x  ; pindir is (all one)out
    push            ; notify an access occurs
    pull block      ; wait for cpu's process finished
    out pins, 8
    set pins, 1     ; WAIT High
    wait 1 gpio 25  ; sleep until this cycle ends
    mov pindirs, NULL   ; D0-D7 reset to 3-state (input)
.wrap

% c-sdk {
#include <stdio.h>
#include "hardware/pio.h"
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
//extern int my_pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out);

void clockgen_program_init(PIO pio, uint sm, uint offset, uint pin) {
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   pio_sm_config c = clockgen_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin, 1);
   pio_sm_init(pio, sm, offset, &c);
}

void wait_control_program_init(PIO pio, uint sm, uint offset, uint pin) {
   // pin ... WAIT_Pin
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   pio_sm_config c = wait_control_program_get_default_config(offset);
   sm_config_set_in_pins(&c, 16);
   sm_config_set_in_pin_count(&c, 8);
   sm_config_set_out_pins(&c, 16, 8);
   sm_config_set_set_pins(&c, pin, 1);
   pio_sm_init(pio, sm, offset, &c);
}

%}